name: Auto Tag and Release

on:
  push:
    branches:
      - main
    paths:
      - 'CHANGELOG.md'

permissions:
  contents: write

jobs:
  check-and-tag:
    name: Check Version and Create Tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for new version in CHANGELOG
        id: check_version
        run: |
          # Extract latest version from CHANGELOG (first version after Unreleased)
          NEW_VERSION=$(awk '/## \[[0-9]/ {gsub(/[\[\]]/, "", $2); print $2; exit}' CHANGELOG.md)

          # Get latest git tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_VERSION=${LATEST_TAG#v}

          echo "📋 Latest version from CHANGELOG: ${NEW_VERSION}"
          echo "🏷️  Latest version from git tags: ${LATEST_VERSION}"

          if [ -z "$NEW_VERSION" ]; then
            echo "❌ No version found in CHANGELOG.md"
            echo "should_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [ "$NEW_VERSION" != "$LATEST_VERSION" ]; then
            echo "✅ New version detected: ${NEW_VERSION}"
            echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
            echo "new_tag=v${NEW_VERSION}" >> $GITHUB_OUTPUT
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "ℹ️  No new version - CHANGELOG version matches latest tag"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate version format
        if: steps.check_version.outputs.should_release == 'true'
        run: |
          NEW_VERSION="${{ steps.check_version.outputs.new_version }}"

          # Check if version follows semver format (X.Y.Z)
          if ! echo "$NEW_VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "❌ Invalid version format: ${NEW_VERSION}"
            echo "Version must follow semantic versioning: X.Y.Z"
            exit 1
          fi

          echo "✅ Version format is valid: ${NEW_VERSION}"

      - name: Check if version date is set
        if: steps.check_version.outputs.should_release == 'true'
        run: |
          NEW_VERSION="${{ steps.check_version.outputs.new_version }}"

          # Check if the version has a date (not TBD or similar)
          VERSION_LINE=$(grep -A1 "## \[${NEW_VERSION}\]" CHANGELOG.md | head -1)

          if echo "$VERSION_LINE" | grep -qi "TBD"; then
            echo "❌ Version ${NEW_VERSION} is marked as TBD"
            echo "Please set a release date in CHANGELOG.md before merging"
            exit 1
          fi

          if echo "$VERSION_LINE" | grep -qE '[0-9]{4}-[0-9]{2}-[0-9]{2}'; then
            echo "✅ Version has a valid date"
          else
            echo "⚠️  Warning: Version may not have a date set"
            echo "Consider adding date in format: ## [${NEW_VERSION}] - YYYY-MM-DD"
          fi

      - name: Create and push tag
        if: steps.check_version.outputs.should_release == 'true'
        run: |
          NEW_VERSION="${{ steps.check_version.outputs.new_version }}"
          NEW_TAG="${{ steps.check_version.outputs.new_tag }}"

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create annotated tag
          git tag -a "${NEW_TAG}" -m "Release ${NEW_VERSION}

Automatically created from CHANGELOG.md update

🤖 Generated by GitHub Actions"

          # Push tag
          git push origin "${NEW_TAG}"

          echo "✅ Created and pushed tag: ${NEW_TAG}"
          echo "🚀 Release workflow will be triggered automatically"

      - name: Summary
        if: always()
        run: |
          if [ "${{ steps.check_version.outputs.should_release }}" = "true" ]; then
            echo "### ✅ Tag Created Successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Version**: ${{ steps.check_version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Tag**: ${{ steps.check_version.outputs.new_tag }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: Tag pushed to repository" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The release workflow will now build and publish the release automatically." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📦 [Monitor Release Workflow](https://github.com/${{ github.repository }}/actions/workflows/release.yml)" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ℹ️ No New Version Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "CHANGELOG.md was updated but no new version was detected." >> $GITHUB_STEP_SUMMARY
            echo "The latest version in CHANGELOG.md matches the latest git tag." >> $GITHUB_STEP_SUMMARY
          fi
